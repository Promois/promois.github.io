var script = document.createElement('script');
var js = "";
script.textContent = atob(js);
document.head.appendChild(script);